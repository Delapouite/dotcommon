dotcommon is a crawler that is built to answer questions
*What are the most popular Bash aliases?*,
*What are the most popular Vundle plugins for Vim?*, etc.
It crawls GitHub repos that match topic ``dotfiles`` and counts such things.

.. contents:: Navigation:
   :backlinks: none

Data
====

All of the below was generated by crawling first 500 results of
GitHub search ``topic:dotfiles``.

Vim
---

``vimrc`` was found in 165 repos

Most common set statements
~~~~~~~~~~~~~~~~~~~~~~~~~~

====================  ===
``set incsearch``     107
``set ignorecase``    104
``set expandtab``     99
``set laststatus=2``  97
``set hlsearch``      96
``set autoindent``    95
``set number``        91
``set smartcase``     91
``set nocompatible``  88
``set showcmd``       77
====================  ===

Most popular Vundle plugins
~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========================================== ==
``Plugin 'scrooloose/nerdtree'``            19
``Plugin 'tpope/vim-fugitive'``             15
``Plugin 'VundleVim/Vundle.vim'``           13
``Plugin 'vim-airline/vim-airline'``        13
``Plugin 'airblade/vim-gitgutter'``         11
``Plugin 'vim-airline/vim-airline-themes'`` 11
``Plugin 'tpope/vim-surround'``             10
``Plugin 'scrooloose/syntastic'``           9
``Plugin 'gmarik/Vundle.vim'``              9
``Plugin 'Raimondi/delimitMate'``           7
=========================================== ==

Try it yourself
===============

Clone the repository. The only external dependency is PyGithub_.

``dotcommon.py`` is an executable that imports dotcommon modules
and brings you into Python REPL. First of all, you need to generate
an access token for GitHub and create an instance of ``Github`` class:

.. code-block:: python

    g = Github("your_token_here")
    repos = crawler.get_repos(g)[:50]

The primary operation is *counting atoms* where an *atom* is an alias,
a readline macro, an import statement, etc.

You may use any of the existing presets to generate an instance
of ``collections.Counter`` which will contain counted atoms.

.. code-block:: python

    atomizers = presets.vim_set_statements,
    counter = crawler.count_atoms(repos, atomizers, presets.vim_paths)[0]
    for statement, count in counter.most_common(10):
        print(statement, count)

Writing custom atomizers
------------------------

An atomizer is a function that takes text and returns a sequence of atoms.
For example, if we want to get the most commonly exported variables in bashrc:

.. code-block:: python

    def atomize(text):
        for line in text.splitlines():
            words = line.split()
            if len(words) > 1 and words[0] == "export":
                yield line

    bashrc_paths = (".bashrc", "bashrc")

    counter = crawler.count_atoms(repos, (atomize,), bashrc_paths)[0]
    for export, count in counter.most_common(10):
        print(export, count)

Note that our custom atomizer doesn't recognize comments.
Use ``preset.bash_exports`` to get an atomizer that does.

.. LINKS
.. _PyGithub: https://github.com/PyGithub/PyGithub
